/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */

/**
 * @author: Irene
 */
public class Solution {
    /**
     * This method will be invoked first, you should design your own algorithm 
     * to serialize a binary tree which denote by a root node to a string which
     * can be easily deserialized by your own "deserialize" method later.
     */
    public String serialize(TreeNode root) {
        if (root == null) {
            return new String("");
        }
        StringBuilder sb = new StringBuilder();
        Queue<TreeNode> q = new LinkedList<TreeNode> ();
        q.offer(root);
        while (q.size() > 0) {
            TreeNode node = q.poll();
            if (node == null) {
                sb.append("#,");
            } else {
                sb.append(String.valueOf(node.val));
                sb.append(",");
                q.offer(node.left);
                q.offer(node.right);
            }
        }
        System.out.println(sb.toString());
        return new String (sb.toString());
    }

    /**
     * This method will be invoked second, the argument data is what exactly
     * you serialized at method "serialize", that means the data is not given by
     * system, it's given by your own serialize method. So the format of data is
     * designed by yourself, and deserialize it here as you serialize it in 
     * "serialize" method.
     */
    int LEFT = 0;
    int RIGHT = 1;
    public TreeNode deserialize(String data) {
        if (data.length() == 0) {
            return null;
        }
         String[] values = data.split(",");
        List<TreeNode> list = new ArrayList<TreeNode> ();
        TreeNode root = new TreeNode(Integer.parseInt(values[0]));
        list.add(root);
        int parentIdx = 0;
        int dir = LEFT;
       
        for (int i = 1; i < values.length; i++) {
            if (!values[i].equals("#")) {
                TreeNode node = new TreeNode (Integer.parseInt(values[i]));
                TreeNode p = list.get(parentIdx);
                if (dir == LEFT) {
                    p.left = node;
                    dir = RIGHT;
                } else {
                    p.right = node;
                    dir = LEFT;
                    parentIdx += 1;
                }
                list.add(node);
            } else { // #
                TreeNode p = list.get(parentIdx);
                if (dir == LEFT) {
                    p.left = null;
                    dir = RIGHT;
                } else {
                    p.right = null;
                    dir = LEFT;
                    parentIdx += 1;
                }
            }
        }
        return root;
    }
}
