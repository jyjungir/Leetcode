public class Solution {
    /*
     * @param A: An integer array
     * @param B: An integer array
     * @return: a double whose format is *.5 or *.0
     */
    public double findMedianSortedArrays(int[] A, int[] B) {
        int len = A.length + B.length;
        int[] temp = mergeArray(A, B);
        System.out.println(Arrays.toString(temp));
        if (temp.length % 2 == 1) {
            int mid = temp.length / 2;
            return (double)temp[mid];
        } else {
            int mid = temp.length / 2;
            return (double)(temp[mid] + temp[mid - 1]) / (double)2;
        }
    }
    
    private int[] mergeArray(int[] A, int[] B) {
        
        int idxA = 0;
        int idxB = 0;
        int idx = 0;
        int lenA = 0;
        int lenB = 0;
        if (A == null || A.length == 0) {
            lenA = 0;
        } else {
            lenA = A.length;
        }
        if (B == null || B.length == 0) {
            lenB = 0;
        } else {
            lenB = B.length;
        }
        int[] temp = new int[lenA + lenB];
        while (idxA < lenA && idxB < lenB) {
            if (A[idxA] <= B[idxB]) {
                temp[idx] = A[idxA];
                idx ++;
                idxA ++;
            } else {
                temp[idx] = B[idxB];
                idx ++;
                idxB ++;
            }
        }
        while (idxA < lenA) {
            temp[idx] = A[idxA];
            idx ++;
            idxA ++;
        }
        while (idxB < lenB) {
            temp[idx] = B[idxB];
            idx ++;
            idxB ++;
        }
        return temp;
    }
}
