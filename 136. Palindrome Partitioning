public class Solution {
    /*
     * @param s: A string
     * @return: A list of lists of string
     */
    public List<List<String>> partition(String s) {
        List<String> sub = new ArrayList<String> ();
        List<List<String>> results = new ArrayList<List<String>> ();
        helper(s, 0, sub, results);
        return results;
    }
    
    private boolean isPalindrome(String str) {
        int i = 0;
        int j = str.length() - 1;
        while (i < j) {
            if (str.charAt(i) != str.charAt(j)) {
                return false;
            }
            i += 1;
            j -= 1;
        }
        return true;
    }
    
    private void helper(String s, 
                        int start,
                        List<String> sub,
                        List<List<String>> results) {
                            
        if (start == s.length()) {
            results.add(new ArrayList<String> (sub));
            return;
        }
        
        for (int i = start; i < s.length(); i++) {
            String temp = s.substring(start, i + 1);
            if (!isPalindrome(temp)) {
                continue;
            }
            sub.add(temp);
            helper(s, i + 1, sub, results);
            sub.remove(sub.size() - 1);
        }
        
    }
    
}
