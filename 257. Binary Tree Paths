/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void buildPath(TreeNode root, String s, List list) {
        if (root == null) {
            return;
        }
        String newStr = s + "->" + Integer.toString(root.val);
        if (root.left == null && root.right == null) {
            list.add(newStr);
        }
        buildPath(root.left, newStr, list);
        buildPath(root.right, newStr, list);
    }
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> list = new ArrayList<String> ();
        if (root == null) {
            return list;
        }
        if (root.left != null) {
            buildPath(root.left, Integer.toString(root.val), list);
        }
        if (root.right != null) {
            buildPath(root.right, Integer.toString(root.val), list);
        }
        if (list.size() == 0) {
            list.add(Integer.toString(root.val));
        }
        return list;
    }
}
