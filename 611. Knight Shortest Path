/**
 * Definition for a point.
 * public class Point {
 *     publoc int x, y;
 *     public Point() { x = 0; y = 0; }
 *     public Point(int a, int b) { x = a; y = b; }
 * }
 */

/**
 * @author: Irene 
 */
public class Solution {
    /*
     * @param grid: a chessboard included 0 (false) and 1 (true)
     * @param source: a point
     * @param destination: a point
     * @return: the shortest path 
     */
    private boolean isDestination(Point p, Point destination) {
        if (p.x == destination.x && p.y == destination.y) {
            return true;
        }
        return false;
    }
    private boolean inBound(Point p, boolean[][] grid) {
        if (p.x >= 0 && p.y >= 0 
         && p.x < grid.length && p.y < grid[0].length) {
             return true;
         }
         return false;
    }
    
    public int shortestPath(boolean[][] grid, Point source, Point destination) {
        int[] dirX = {1, 1, -1, -1, 2, 2, -2, -2};
        int[] dirY = {2, -2, 2, -2, 1, -1, 1, -1};
        Queue<Point> q = new LinkedList<Point> ();
        q.offer(source);
        int distance = 0;
        while (q.size() > 0) {
            distance += 1;
            int size = q.size();
            for (int s = 0; s < size; s++) {
                Point cur = q.poll();
                for (int i = 0; i < dirX.length; i++) {
                    Point p = new Point(cur.x + dirX[i], cur.y + dirY[i]);
                    if (!inBound(p, grid)) {
                        continue;
                    }
                    if (isDestination(p, destination)) {
                        return distance;
                    }
                    if (grid[p.x][p.y] == false) {
                        q.offer(p);
                        grid[p.x][p.y] = true;
                    }
                    
                }
            }
        }
        return -1;
        
    }
}
