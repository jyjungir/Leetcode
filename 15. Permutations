public class Solution {
    /*
     * @param nums: A list of integers.
     * @return: A list of permutations.
     */
    public List<List<Integer>> permute(int[] nums) {
        List<Integer> perm = new ArrayList<Integer> ();
        List<List<Integer>> results = new ArrayList<List<Integer>> ();
        HashSet<Integer> set = new HashSet<Integer> ();
        
        helper(nums, perm, results, set);
        return results;
    }
    
    private void helper(int[] nums, 
                        List<Integer> perm, 
                        List<List<Integer>> results,
                        Set<Integer> set) {
        if (perm.size() == nums.length) {
            results.add(new ArrayList<Integer> (perm));
            return;
        }
        
        for (int i = 0; i < nums.length; i++) {
            if (set.contains(nums[i])) {
                continue;
            }
            perm.add(nums[i]);
            set.add(nums[i]);
            helper(nums, perm, results, set);
            perm.remove(perm.size() - 1);
            set.remove(nums[i]);
        }
    }
}
