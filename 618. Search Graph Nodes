/**
 * Definition for graph node.
 * class UndirectedGraphNode {
 *     int label;
 *     ArrayList<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { 
 *         label = x; neighbors = new ArrayList<UndirectedGraphNode>(); 
 *     }
 * };
 */

/**
 * @author: Irene
 */

public class Solution {
    /*
     * @param graph: a list of Undirected graph node
     * @param values: a hash mapping, <UndirectedGraphNode, (int)value>
     * @param node: an Undirected graph node
     * @param target: An integer
     * @return: a node
     */
    public UndirectedGraphNode searchNode(ArrayList<UndirectedGraphNode> graph,
                                          Map<UndirectedGraphNode, Integer> values,
                                          UndirectedGraphNode node,
                                          int target) {
        if (node == null) {
            return null;
        }
        Queue<UndirectedGraphNode> q = new LinkedList<UndirectedGraphNode> ();
        Set<UndirectedGraphNode> set = new HashSet<UndirectedGraphNode> ();
        q.offer(node);
        set.add(node);
        while (q.size() > 0) {
            UndirectedGraphNode cur = q.poll();
            if (values.get(cur) == target) {
                return cur;
            }
            List<UndirectedGraphNode> neighbors = cur.neighbors;
            for (UndirectedGraphNode n : neighbors) {
                if (values.get(n) == target) {
                    return n;
                }
                if (!set.contains(n)) {
                    q.offer(n);
                    set.add(n);
                }
            }
        }
        return null;
    }
}
