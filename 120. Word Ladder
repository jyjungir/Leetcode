public class Solution {
    /*
     * @param start: a string
     * @param end: a string
     * @param dict: a set of string
     * @return: An integer
     */
    public int ladderLength(String start, String end, Set<String> dict) {
        if (start.equals(end)) {
            return 1;
        }
        dict.add(start);
        dict.add(end);
        return helper(start, end, dict);
    }
    
    private String replace(String str, int index, char c) {
        char[] chArr = str.toCharArray();
        chArr[index] = c;
        return new String(chArr);
    }
    
    private List<String> getNextWord(String str, Set<String> dict) {
        List<String> listNext = new ArrayList<String> ();
        for (char ch = 'a'; ch <= 'z'; ch ++) {
            for (int i = 0; i < str.length(); i++) {
                if (str.charAt(i) == ch) {
                    continue;
                }
                //replace
                String next = replace(str, i, ch);
                if (dict.contains(next)) {
                    listNext.add(next);
                }
            }
        }
        return listNext;
    }
    
    private int helper(String start, String end, Set<String> dict) {
        Queue<String> q = new LinkedList<String> ();
        Set<String> set = new HashSet<String> ();
        q.offer(start);
        set.add(start);
        int dist = 1;
        while (q.size() > 0) {
            int size = q.size();
            dist += 1;
            for (int i = 0; i < size; i++) {
                String tmp = q.poll();
                List<String> nextWords = getNextWord(tmp, dict);
                for (String next : nextWords) {
                    if (set.contains(next)) {
                        continue;    
                    }
                    if (next.equals(end)) {
                        return dist;
                    }
                    
                    q.offer(next);
                    set.add(next);
                }
            }
        }
        return -1;
    }
}
