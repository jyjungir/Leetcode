public class Solution {
    /*
     * @param numCourses: a total of n courses
     * @param prerequisites: a list of prerequisite pairs
     * @return: the course order
     */
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        // course, indegree
        int[] indegree = new int[numCourses];
        Map<Integer, List<Integer>> courses = new HashMap<Integer, List<Integer>> ();
        
        for (int i = 0; i < numCourses; i++) {
            indegree[i] = 0;
        }
        for (int i = 0; i < prerequisites.length; i++) {
            if (!courses.containsKey(prerequisites[i][1])) {
                List<Integer> nextCourses = new ArrayList<Integer> ();
                nextCourses.add(prerequisites[i][0]);
                courses.put(prerequisites[i][1], nextCourses);
            } else {
                List<Integer> nextCourses = courses.get(prerequisites[i][1]);
                nextCourses.add(prerequisites[i][0]);
                courses.put(prerequisites[i][1], nextCourses);
            }
            indegree[prerequisites[i][0]] += 1;
        }
        
        Queue<Integer> q = new LinkedList<Integer> ();
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0) { // indegree = 0
                q.offer(i);
            }
        }
        List<Integer> list = new ArrayList<Integer> ();
        while (q.size() > 0) {
            int course = q.poll();
            list.add(course);
            if (courses.containsKey(course)) {
                List<Integer> next = courses.get(course);
                for (int c : next) {
                    int temp = indegree[c] - 1;
                    if (temp == 0) {
                        q.offer(c);
                    }
                    indegree[c] = temp;
                }
            }
        }
        System.out.println(list.size());
        if (list.size() == numCourses) {
           int[] res = new int[list.size()];
           for (int i = 0; i < list.size(); i++) {
                res[i] = list.get(i);
            }
            return res;
        }
        return new int[0];
    }
}
