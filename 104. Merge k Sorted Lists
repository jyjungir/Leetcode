/**
 * Definition for ListNode.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int val) {
 *         this.val = val;
 *         this.next = null;
 *     }
 * }
 */ 
public class Solution {
    /**
     * @param lists: a list of ListNode
     * @return: The head of one sorted list.
     */
    private class ListNodeComparator implements Comparator<ListNode> {
        public int compare(ListNode n1, ListNode n2) {
            return n1.val - n2.val;
        }
    }
    
    public ListNode mergeKLists(List<ListNode> lists) { 
        if (lists == null || lists.size() == 0) {
            return null;
        }
        Queue<ListNode> pq = new PriorityQueue<ListNode>(lists.size(), new ListNodeComparator());
        
        for (int i = 0; i < lists.size(); i++) {
            if (lists.get(i) != null) {
                pq.offer(lists.get(i)); // heads
            }
        }
        ListNode dummy = new ListNode(-1);
        ListNode tail = null;
        
        while (pq.size() > 0) {
            ListNode minHead = pq.poll();
            ListNode next = minHead.next;
            if (next != null) {
                pq.offer(next);
            }
            if (dummy.next == null) {
                dummy.next = minHead;
            }
            if (tail == null) {
                tail = minHead;
            } else {
                tail.next = minHead;
                tail = tail.next;
            }
        }
        return dummy.next;
    }
}
